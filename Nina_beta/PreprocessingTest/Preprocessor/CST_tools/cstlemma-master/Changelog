-------------------------------
Version 7.10 (6 February 2016)
-------------------------------
Improved rule based lemmatisation of capitalised words that are at the
beginning of a line.
1) If the same capitalised word occurs elsewhere in the input text in a
non-sentence initial position, then the word is not converted to lowercase
before being lemmatised.
2) Otherwise, the lemma(s) is/are formed in two steps:
a) The word is lemmatised as it is, but any lemmas formed by rules
without a prefix part are discarded. So acceptable rules in this step must be
case sensitive.
b) Finally, the word is lowercased and lemmatised. The lemmas formed in the
second step are appended to those formed in the first step.

Tomake this work, if the input is flat text, each segment should be on a
separate line. A newline character indicates a segment separator. If the input
is an XML-formatted file, use elements like <p> ... </p> or <br /> to indicate
segment breaks. Declare the segment breaking element with the new Xs<element>
option, e.g., -Xsp

-------------------------------
Version 7.01 (24 August 2015)
-------------------------------
Cosmetic changes, allow empty lines in input when making dictionary.

-------------------------------
Version 7.0 (13 August 2015)
-------------------------------
Debugged lemmatisation of ambiguous words. (Previously, not all possible lemmas
were always returned.)
Changed default values for 't', 'u', 'U', 'H' and 'l' options. Without these
options on the command line, the following is assumed: -t- -u- -U- -H2 -l-
That means that it is assumed that the input has no tags, that the output
should not be disambiguated (all candidate lemma's should be produced) and
that the casing of the output should be similar to the input's casing.
(The idea is that you have to turn on options that require extra processing.)
The old algorithm for creating suffix based flexrules is deprecated. Users
who still want to use this algorithm must add an extra 'F': -FF
The prefered way to generate flexrules for cstlemma is the program
'affixtrain'. (https://github.com/kuhumcst/affixtrain)


-------------------------------
Version 6.03 (3 July 2015)
-------------------------------
Renamed 'function'. (This name is already taken.)
Replaced string hashing function in hashmap.cpp. (Please pull new version of https://github.com/kuhumcst/hashmap)
Appended newlines to cpp and h files where desirable.
Deleted unused member variable 'kar' in wordReader class.

-------------------------------
Version 6.02 (21 April 2015)
-------------------------------
Removed unused or unnecessary code. There was a 255 word size limit
that is gone now.

-------------------------------
Version 6.01 (17 February 2015)
-------------------------------
New rules format, V3, which is Recognised by inspecting the start of the file.
The new format allows a greater amount of ambiguity, for instance for  words
with ten different lemmas. Previously the maximum supported ambiguoity was two.

-------------------------------
Version 5.06 (9 August 2014)
-------------------------------
Added call to parseAsXml to parse procesor instructions correctly.

-------------------------------
Version 5.05 (28 February 2014)
-------------------------------
XML input with tagged text in content came out with POS-tags still there,
even if the output format did not specify that.

-------------------------------
Version 5.04 (24 February 2014)
-------------------------------
Introduced default -I format for XML input.

-------------------------------
Version 5.03 (24 February 2014)
-------------------------------
Null terminated strings read with fread.

-------------------------------
Version 5.02 (24 February 2014)
-------------------------------
The -X option, without further option arguments, was not working. Now it does.
If the -I option was used, the program could hang if the input didn't conform
to the -I format.

------------------------------
Version 5.01 (6 January 2014)
------------------------------
No functional changes. Deleted comments that were change notifications and
commented-out code. Made sure that setting PROGMAKEDICT, PROGMAKESUFFIXFLEX or
PROGLEMMATISE has the effect of neutralizing irrelevant code. Only if all three
are defined, all code is compiled, creating a Swiss Army Knive that can 
(1) Create a built-in dictionary
(2) Create an old-style flex rule list 
    (Use the program affixtrain for new style!)
(3) Lemmatise a text.

------------------------------
Version 5.0 (3 January 2014)
------------------------------
When lemmatizing (-L option):
Made #define STREAM 1 work as intended: handle standard input line-wise.
If #define STREAM 0, stdio.h functions are used. In that case, input
MUST come from a named file. (-i option).

stdio.h is not removed everywhere. E.g. makedict functionality (-D option)
still uses fprintf even if STREAM 1 is defined in defines.h.

------------------------------
Version 2.4 (3 March 2005)
------------------------------
Removed (undocumented) requirement that word classes must be capitalised.

------------------------------
Version 2.3 (24 February 2005)
------------------------------
Problem solved with -I option. (input format) 

------------------------------
Version 2.2 (23 February 2005)
------------------------------
Problems with generation of flex rules and dictionary solved.
Addition of $s field (word separator that expands to blank or new line) in -c
format.

------------------------------
Version 2.1 (27 January 2004)
------------------------------
General beautification of code.
Introduction of C++ streams instead of file pointers (optional).
Lemmata can contain uppercase characters.

----------------------------
Version 2.0 (5 January 2004)
----------------------------
Initial version under GPL

-------------------------
Version 1.0 (Autumn 2002)
-------------------------
Initial non-GPL version.
