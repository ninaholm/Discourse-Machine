{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fmodern\fcharset0 CourierNewPSMT;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;\f4\fmodern\fcharset0 CourierNewPS-ItalicMT;}
{\colortbl;\red255\green255\blue255;\red191\green191\blue191;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid202\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid302\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid402\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid403\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid502\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid503\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid602\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid702\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{lower-alpha\}.}{\leveltext\leveltemplateid802\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid902\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1002\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1102\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1202\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1302\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1402\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1502\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1503\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1602\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1603\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1702\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1802\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1803\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1902\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1903\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2002\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2102\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2103\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2202\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2203\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid2302\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listname ;}\listid24}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}}
{\info
{\title the CST Lemmatiser}
{\author Bart Jongejan & Dorte Haltrup}
{\*\company Center for Sprogteknologi, University of Copenhagen}}\paperw11900\paperh16840\margl1134\margr1134\margb1701\margt1701\vieww12200\viewh17140\viewkind1
\deftab1304
\pard\pardeftab1304\ri-6\sb240\qc\partightenfactor0

\f0\b\fs40 \cf0 \
\
the CST Lemmatiser
\b0\fs20 \
\pard\pardeftab1304\ri-6\sb240\qc\partightenfactor0

\fs24 \cf0 \
\
\
\
Bart Jongejan & Dorte Haltrup\
\
\
\
\
\
\
\
\
\
\
Center for Sprogteknologi, University of Copenhagen\
February 2005\
\pard\pardeftab1304\ri-6\sb240\partightenfactor0

\fs20 \cf0 \page \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0  Center for Sprogteknologi, University of Copenhagen 2002, 2004, 2005\
\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 Center for Sprogteknologi\
University of Copenhagen\
Njalsgade 80\
2300 Copenhagen S.\
Denmark\
\
http://www.cst.dk\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 \
\pard\pardeftab1304\ri-6\sb240\partightenfactor0
\cf0 \
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b\fs28 \cf0 Contents\
\pard\tx720\tqr\tx9628\pardeftab1304\ri-6\qj\partightenfactor0

\b0\fs20 \cf0 1.
\f1\fs24 	
\f0\fs20 Introduction	1
\f1\fs24 \

\f0\fs20 2.
\f1\fs24 	
\f0\fs20 The CST lemmatiser program	2
\f1\fs24 \
\pard\tx960\tqr\tx9628\pardeftab1304\li198\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 2.1.
\f1\fs24 	
\f0\fs20 Input	2
\f1\fs24 \

\f0\fs20 2.2.
\f1\fs24 	
\f0\fs20 Processing	2
\f1\fs24 \
\pard\tx1200\tqr\tx9628\pardeftab1304\li403\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 2.2.1.
\f1\fs24 	
\f0\fs20 Lemmatisation	2
\f1\fs24 \

\f0\fs20 2.2.2.
\f1\fs24 	
\f0\fs20 Training	6
\f1\fs24 \
\pard\tx960\tqr\tx9628\pardeftab1304\li198\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 2.3.
\f1\fs24 	
\f0\fs20 Output	7
\f1\fs24 \
\pard\tx720\tqr\tx9628\pardeftab1304\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 3.
\f1\fs24 	
\f0\fs20 Controlling the output format	9
\f1\fs24 \
\pard\tx960\tqr\tx9628\pardeftab1304\li198\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 3.1.
\f1\fs24 	
\f0\fs20 Introduction	9
\f1\fs24 \

\f0\fs20 3.2.
\f1\fs24 	
\f0\fs20 Syntax of \'96c, -b and \'96B parent format strings	12
\f1\fs24 \

\f0\fs20 3.3.
\f1\fs24 	
\f0\fs20 Syntax of \'96b, -B and \'96W child format strings	14
\f1\fs24 \

\f0\fs20 3.4.
\f1\fs24 	
\f0\fs20 Examples of format strings	14
\f1\fs24 \
\pard\tx720\tqr\tx9628\pardeftab1304\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.
\f1\fs24 	
\f0\fs20 Command line options	17
\f1\fs24 \
\pard\tx960\tqr\tx9628\pardeftab1304\li198\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.1.
\f1\fs24 	
\f0\fs20 Introduction	17
\f1\fs24 \

\f0\fs20 4.2.
\f1\fs24 	
\f0\fs20 Create binary dictionary	17
\f1\fs24 \
\pard\tx1200\tqr\tx9628\pardeftab1304\li403\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.2.1.
\f1\fs24 	
\f0\fs20 Command line	17
\f1\fs24 \

\f0\fs20 4.2.2.
\f1\fs24 	
\f0\fs20 Options	17
\f1\fs24 \
\pard\tx960\tqr\tx9628\pardeftab1304\li198\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.3.
\f1\fs24 	
\f0\fs20 Create or add flex patterns	19
\f1\fs24 \
\pard\tx1200\tqr\tx9628\pardeftab1304\li403\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.3.1.
\f1\fs24 	
\f0\fs20 Command line	19
\f1\fs24 \

\f0\fs20 4.3.2.
\f1\fs24 	
\f0\fs20 Options	19
\f1\fs24 \
\pard\tx960\tqr\tx9628\pardeftab1304\li198\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.4.
\f1\fs24 	
\f0\fs20 Lemmatise	19
\f1\fs24 \
\pard\tx1200\tqr\tx9628\pardeftab1304\li403\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.4.1.
\f1\fs24 	
\f0\fs20 Command line	19
\f1\fs24 \

\f0\fs20 4.4.2.
\f1\fs24 	
\f0\fs20 Options	20
\f1\fs24 \
\pard\tx960\tqr\tx9628\pardeftab1304\li198\ri-6\qj\partightenfactor0

\f0\fs20 \cf0 4.5.
\f1\fs24 	
\f0\fs20 Option files	23
\f1\fs24 \
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f0\fs20 \cf0 \
\
\pard\tqdec\tx510\pardeftab1304\li414\fi-414\ri-6\sb240\sa60\partightenfactor0
\ls1\ilvl0
\b\fs36 \cf0 1.	Introduction\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 The CST lemmatiser has been developed under the STO project in 2002. The motivation for developing a lemmatiser was the need to \'91handle\'92 new text in order to gather and select domain specific words for the STO database. Since the STO database is corpus based, the selection of new words (lemmas) is based upon frequency and to make a proper frequency calculation, lemmatisation is essential.  \
Our goal and intention has been to make as accurate and flexible lemmatisation as possible. The need for accuracy means that average stemming or truncation is too gross \'96 we needed rules for regularity as well as exceptions. For this purpose we used the around 50.000 lemmas, with their respective inflected forms, from the general vocabulary that already existed in the STO database. The rules of the CST lemmatiser have been created, or rather learned, from the function between lemma and inflected form of these 50.000 lemmas. The demand for flexibility has arisen from a wish to make the CST lemmatiser usable in different applications and is shown in the extensive list of input and output formats.\
The result is a trainable lemmatiser with a variety of functions. It is language independent in the way that it can be trained for different languages, or at least for languages with inflectional suffixes, but not with inflectional prefixes like German. What is needed is a list of lemmas, their infected forms and, if possible, their POS-tag. \
This report contains a description of the function of the CST lemmatiser.\
\pard\tqdec\tx510\pardeftab1304\li414\fi-414\ri-6\sb240\sa60\partightenfactor0
\ls2\ilvl0
\b\fs36 \cf0 2.	The CST lemmatiser program\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 In this chapter we will describe in some detail what the CST lemmatiser does, and why. We will describe what is needed, what can be expected from the output and how the process, the algorithm, functions.\
\pard\tqdec\tx624\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls3\ilvl1
\b\fs28 \cf0 2.1.	Input\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 The input to the CST lemmatiser can either be a text or a list of words and in addition it can be with or without POS-tags. The best lemmatisation is, of course, done with POS-tags because the tags are used to disambiguate homographs in the dictionary, and to control what flex rules to use for new words. If POS-tags are present then the default separator between word form and POS-tag is \'93/\'94 (slash). If you want another input format, you have to specify it on the command line (see chapter 4).\
To get a proper lemmatisation it is essential that the text is tokenised so that punctuation marks are separated from words.\
\pard\tqdec\tx624\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls4\ilvl1
\b\fs28 \cf0 2.2.	Processing\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 The functionality of the CST lemmatiser can be divided into two fields: lemmatisation and training.\
The main function of the lemmatisation is of cause to find the proper lemma for each word in the input. But there are a variety of subfunctions: it can produce frequency lists, lists of conflicts between POS-tag in the input and in the dictionary and it can work with or without a dictionary. In the training process the main function is to create new flex rules.\
It is the main functions that are described below.\
\pard\tqdec\tx737\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls5\ilvl2
\b\fs24 \cf0 2.2.1.	Lemmatisation\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 In our approach to lemmatisation there are three main tasks: \
\pard\tx720\pardeftab1304\li720\fi-720\ri-6\sb240\qj\partightenfactor0
\cf0 Finding lemmas for known words \
Disambiguating if the known words are a homographs\
Guessing lemmas for unknown words\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 Figs. 1-3 show how the algorithm solves these three tasks.\
\page \pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i \cf0 Figure 1: Disambiguation of POS-tagged words \
Figure 2: Disambiguation of words that are not POS tagged\
Figure 3: Lemmatisation using flex-rules. The longest matching pattern (
\b pere
\b0 ) prevails over all shorter matching patterns (
\b e
\b0 ).\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i0 \cf0 Straightforward is the case where a word from the input stream, according to the dictionary, has exactly one homograph that matches both the word form and the POS-tag of the word in question. Also quite straightforward is the case where the dictionary lookup has no result at all: in that case the flex rules can easily produce an unambiguous result.\
More complicated is the case where a word has more than one homograph, each homograph having a different lemma. If the two (or more) alternative lemmas belong to different word classes, the POS-tag from the input is used to disambiguate. If, on the other hand, the alternative lemmas belong to the same word class, the most probable word form is chosen instead. In the Danish dictionary frequency information derived from the tagged Parole corpus is used to estimate a word\'92s probability. If frequency isn\'92t enough (eg. the word forms don\'92t exist in the Parole corpus and hence frequency information is lacking), then a probability estimate is made on the input text and the most frequent lemma is chosen. As a final solution the flex rules are used, ignoring the conflicting lemmas from the dictionary altogether.\
Another type of ambiguity arises when the POS-tag from the input doesn\'92t correspond to the word class (-es) in the dictionary. Our choice here is to let the dictionary overrule the input tags. The reason is that the dictionary is made manually and is therefore more reliable than the inputtags generated by an automatic tagger. If the dictionary presents alternative lemmas, the same procedure as for homographs is used, with the additional heuristic that if none of the aforementioned selection criteria leads to complete disambiguation, the input POS-tag is compared with the word class of each candidate homograph. Although none of the word classes matches exactly with the POS-tag, some word classes may be more related than others. The closest match points at the winning homograph. \
Another approach to lemmatisation is not to discriminate between known and unknown words, ambiguous and unambiguous words. Then flexrules will generate all lemmas. In our application this approach is actually a side effect \'96 our lemmatiser can work by the rules alone and thereby function as an advanced stemmer. This kind of stemming is a bit quicker and a bit more inaccurate than lemmatisation.\
We made a test using the CST lemmatiser with and without the dictionary and with and without POS-tags. The test material was 250.000 words from the Parole corpus. Here are the results:\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrs\brdrw10\brdrcf2 \trbrdrl\brdrs\brdrw10\brdrcf2 \trbrdrr\brdrs\brdrw10\brdrcf2 
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0

\b \cf0 Correct lemmas\cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 Time \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw10\brdrcf2 \trbrdrr\brdrs\brdrw10\brdrcf2 
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab1304\ri-6\partightenfactor0

\b0 \cf0 Input 
\i with
\i0  POS-tags\
Lemmatisation 
\i with
\i0  dictionary\
= 
\b real lemmatiser
\b0 \cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
97,8 %\cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
App. 1 min.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw10\brdrcf2 \trbrdrr\brdrs\brdrw10\brdrcf2 
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab1304\ri-6\partightenfactor0
\cf0 Input 
\i without
\i0  POS-tags\
Lemmatisation 
\i with
\i0  dictionary\
= 
\b discount lemmatiser
\b0 \cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
94,5 %\cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
App. 25 sec\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw10\brdrcf2 \trbrdrr\brdrs\brdrw10\brdrcf2 
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab1304\ri-6\partightenfactor0
\cf0 Input 
\i with
\i0  POS-tags\
Lemmatisation 
\i without 
\i0 dictionary\
 = 
\b good stemmer
\b0 \cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
97,4 %\cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
App. 48 sec.\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrs\brdrw10\brdrcf2 \trbrdrb\brdrs\brdrw10\brdrcf2 \trbrdrr\brdrs\brdrw10\brdrcf2 
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalt \clshdrawnil \clwWidth2652\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrs\brdrw10\brdrcf2 \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrs\brdrw10\brdrcf2 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\pardeftab1304\ri-6\partightenfactor0
\cf0 Input 
\i without
\i0  POS-tags\
Lemmatisation 
\i without
\i0  dictionary\
= 
\b stemmer
\b0 \cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
88,4 %\cell 
\pard\intbl\itap1\pardeftab1304\ri-6\qc\partightenfactor0
\cf0 \
App. 30 sec\cell \lastrow\row
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 \
Among the 250.000 words 24% were unknown to the dictionary. As the schema shows, the CST lemmatiser is doing very well. It seems surprising that the presence of POS-tags makes a bigger difference to the result than the dictionary. The reason is first of all that the flex rule are created from the dictionary, secondly that the rules work according to our intentions, and finally that information about POS is a big help in guiding through the flex rules. In the best result with the 
\i real lemmatiser
\i0  half of the errors made are caused by adjectives, a word class still underrepresented in our training material.
\i \
\pard\tqdec\tx737\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls6\ilvl2
\i0\b\fs24 \cf0 2.2.2.	Training\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 As mentioned in th word form/tag/lemma:\
Example:\
\pard\pardeftab1304\fi1304\ri-6\partightenfactor0
\cf0 Input:	Fordommene/
\fs16 N
\fs20  sl\'f8rer/
\fs16 V_PRES
\fs20  hans/
\fs16 PRON_POSS
\fs20  vurdering/
\fs16 N
\fs20  af/
\fs16 PR\'c6P
\fs20  sagen
\fs16 /N
\fs20 \
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 \
\pard\pardeftab1304\fi1304\ri-6\qj\partightenfactor0
\cf0 Output:	Fordommene
\fs16 /N/
\fs20  fordom \
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 sl\'f8rer/
\fs16 V_PRES
\fs20 / sl\'f8re\
hans/
\fs16 PRON_POSS/
\fs20  hans \
vurdering/
\fs16 N/
\fs20 vurdering \
af/
\fs16 PR\'c6P
\fs20 /af/\
sagen/N/sag\
\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 In general the CST lemmatiser can be instructed to either focus on listing full forms or lemmas. The first, in turn, can focus on tokens, meaning all words in a text, or on types, meaning all different word forms in a text. Either way, the lemmatiser can provide information on both in its output. Thus, it is possible to produce:\
\pard\tx720\pardeftab1304\li720\fi-720\ri-6\sb240\qj\partightenfactor0
\cf0 Output corresponding to the input text, enriched with information on each word\'92s lemma, shown as the default output above. This token oriented output is especially useful if the context of each word needs to be preserved.\
Output as a sorted list of the words that occur in the text, together with information on each word\'92s lemma. This type oriented output, which sorts and merges the input so that each full form occurring one or more times in the input only occurs once in the output, is useful if the main interest is in creating a full-form-to-lemma-\'93dictionary\'94.\
Output as a sorted list of lemmas that are represented one or more times by full forms in the text. This lemma-oriented output is useful if one wants to know which lemmas are occurring in the text at all. Each lemma in the list can be enriched with a full listing of the full forms leading to the lemma after lemmatisation, thus giving a good impression of which inflected forms of a lemma occur in the text.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 All forms of output can be enriched with frequency information, telling how often a full form occurs in the text and how often a lemma (disregarding any inflections) is represented in the text.\
As mentioned the CST lemmatiser has two resources that it can use to determine the lemma of a given word: a built-in dictionary and a list of flex rules. The lemmatiser can show the results of both resources and the user can define which result or results should be selected for output.\
In section 2.2.1 we described how the CST lemmatiser applies some heuristics to solve ambiguous cases. Some of these heuristics can be activated by setting options on the command line: the flex rules can be forced to only output unambiguous solutions whereas the dictionary mechanism can be instructed to prune solutions away using word frequencies from a \'93standard\'94 corpus, in the Danish case the Parole corpus, or, as a last refuge, by looking at the lemma\'92s frequency in the input text.\
\pard\tx360\pardeftab1304\li414\fi-414\ri-6\sb240\sa60\partightenfactor0
\ls7\ilvl1
\b\fs36 \cf0 3.	Controlling the output format\
\pard\tqdec\tx624\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls8\ilvl1
\fs28 \cf0 3.1.	Introduction\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 If we don\'92t take measures to suppress ambiguous dictionary look-ups and ambiguous flex rule applications, a word may have any number of lemmas. Also, if the program uses a dictionary, it is possible that a word isn\'92t found in the dictionary at all. In general, it is desirable to be able to steer the output so that certain phenomena can be scrutinized more easily. For example, it might be nice to always have just a single solution to a lemmatisation, whatever the amount of ambiguity that the program encounters. This could be done by presenting the solution obtained by dictionary look-up if there is exactly one such solution and to present the flex rules\'92 solution in all other cases. As another example, we might be interested to only see those words in the output that gave rise to ambiguity, or to see only those lemmas that are represented by five inflected forms in the text. These examples show that the program must allow the user to define 
\i which items
\i0  are shown in the output, under 
\i which conditions
\i0  they must be shown and 
\i how
\i0  they must be shown.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i \cf0 Figure 4. Internally, each word form occurring in the input has one or more lemmas, originating from the dictionary or from application of the flex rules. And conversely, lemmas have typically more than one word form.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i0 \cf0 Basically, the output consists of lemmas or contains lemmas, among other items. These other items are first and foremost the original word form and the POS-tag of the word form, but also statistics and lay-out elements can be written into the output. If the output is to contain both lemmas and word forms, we have the complication that a lemma can have more than one word form and that a word form can have more than one lemma (see fig. 4). \
As we cannot both list all word forms for each lemma and all lemmas for each word form in a meaningful way, we have to choose. \
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i \cf0 Figure 5. General format of the output. \
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i0 \cf0 Thus, either the output lists the lemmas that occur in the text and, for each lemma, lists the word forms (=children) that belong to the lemma (=parent), or, alternatively, the output lists the word forms as they occur in the text and lists the possible lemmas (=children) for each word form (=parent).\
The CST lemmatiser can use several strategies for reducing the number of lemmas per word form. In fully disambiguated output each word form has exactly one lemma. On the other hand, a lemma in fully disambiguated output can still have more than one word form. Therefore, fully disambiguated output will look like in figs 6a and 6b.\
\pard\tx3855\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 	\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i \cf0 Figure 6a Disambiguated output. One lemma per word form. \
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i0 \cf0 \page \
\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i \cf0 Figure 6b Disambiguated output. Possibly more than one word form per lemma.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i0 \cf0 Disambiguation can basically take place in three ways: \
\pard\tx720\pardeftab1304\li720\fi-360\ri-6\sb240\qj\partightenfactor0
\ls9\ilvl1\cf0 1)	If dictionary look-up has more than one results, then some results may be discarded for some reason.\
2)	The set of flex rules can be pruned for all ambiguous rules.\
3)	If dictionary look-up has more than one single result, then we can use the (disambiguated) flex-rules instead.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 Whereas 1) and 2) are governed by command line options dedicated to several heuristics, 3) is a kind of disambiguation that is effectuated by carefully formulating how the output must be shaped. Thus, it is possible to program the output in the following way:\
\
\pard\pardeftab1304\ri-6\partightenfactor0

\f2 \cf0 	
\f3\b \ul If
\f2\b0 \ulnone  there is just one candidate lemma from the dictionary \
	
\f3\b \ul Then
\f2\b0 \ulnone  output the lemma from the dictionary.\
	
\f3\b \ul Else
\f2\b0 \ulnone  output the lemma as computed by the flex rules.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f0 \cf0 If all ambiguous rules are removed beforehand, then this program would produce fully disambiguated output.\
Notice that disambiguation attempts (those that are commanded by command line options) take place before such output rules are applied. So the lemmatiser will first try to disambiguate dictionary look-ups on the basis of, say, corpus frequencies and then it may decide to use the flex rules after all. The programmability of the output makes it possible to format the output in many other ways, for example\
\
\pard\pardeftab1304\ri-6\partightenfactor0

\f2 \cf0 	
\f3\b \ul If
\f2\b0 \ulnone  there are more than one candidate lemmas from the dictionary\
	
\f3\b \ul Then
\f2\b0 \ulnone  output these lemmas\
	
\f3\b \ul Else
\f2\b0 \ulnone  do not produce output at all.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f0 \cf0 Or\
\pard\pardeftab1304\ri-6\partightenfactor0

\f2 \cf0 	
\f3\b \ul If
\f2\b0 \ulnone  there are more than one candidate lemmas from the dictionary\
	
\f3\b \ul Then
\f2\b0 \ulnone  output these lemmas and the flex rule lemmas\
	
\f3\b \ul Else
\f2\b0 \ulnone  only output the dictionary lemma\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f0 \cf0 Or\
\pard\pardeftab1304\ri-6\partightenfactor0

\f2 \cf0 	
\f3\b \ul If
\f2\b0 \ulnone  there are no candidate lemmas from the dictionary\
	
\f3\b \ul Then
\f2\b0 \ulnone  output the flex rule lemmas\
	
\f3\b \ul Else
\f2\b0 \ulnone  don\'92t output anything.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f0 \cf0 As these examples have made clear, there is a need to be able to count the number of children data (lemmas candidating for a word, words candidating for a lemma) and to be able to decide what to output, based on these numbers. This is achieved by defining format strings on the command line; one or two format strings for the way a child must be formatted and one or two format strings for the way a parent must be formatted. It is only in the parent format string that conditions can be tested and decisions can be made as to what to output, based on the results of these tests. If the output must list all word forms for each lemma, then we use the \'96B or -b command line option to describe the parent format (the lemma) and the \'96W command line option to describe the child format (the word forms belonging to the lemma). If the output must list all word forms and the lemmas for each word form (whether or not disambiguated), then we use the \'96c command line option to describe the parent format string (the word form) and the \'96B or \'96b command line options to describe the child format strings (the lemmas). The syntax of these format strings is described in the next section.\
\pard\tqdec\tx624\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls10\ilvl1
\b\fs28 \cf0 3.2.	Syntax of \'96c, -b and \'96B parent format strings\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 Note: Angled brackets and vertical bars (
\i OR
\i0 ) are part of the syntax notation. Expressions between angled brackets denote non-terminal nodes. Italicised text is comment.  Longer comments are put in footnotes.\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0   \
format ::= 		  <quote><expression><quote>\
quote ::= 		  \'94 
\i double quote (Windows)\

\i0  		  \'92 
\i single quote (Unix, Linux)
\i0 \
expression ::= 	  <expression element><expression>\
expression element ::= 	  <countable expression element>\
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | <uncountable expression element >\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 countable expression element ::= \
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0   <invisible countable expression element>\
| <countable block>\
| <countable field>\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 invisible countable expression element ::= \
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0   [<countable expression element>]<hide tag>\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 uncountable expression element ::= \
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0   <uncountable block>\
\pard\pardeftab1304\li2608\ri-6\qj\partightenfactor0
\cf0 | <uncountable field spec> \
| <literal expression>\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 literal expression ::=	  
\i a string of printable characters
\i0 \
uncountable block ::= 	  [<countable expression>]\
\pard\pardeftab1304\ri-6\partightenfactor0
\cf0 countable expression ::= 	  <countable expression element> <expression> \
\pard\pardeftab1304\li1304\fi1304\ri-6\partightenfactor0
\cf0 | <expression element ><countable expression>\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 countable block ::=  	  [<countable expression>]<test> \
countable field ::= 	  <countable field spec>\
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | <countable field spec><test>\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 countable field spec ::= 	  $ <countable field name>\
uncountable field spec ::= 	  $ <uncountable field name>\
countable field name ::= 	  b\
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | B\
| W\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 uncountable field name ::=	  f\
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | s\
| t\
| w\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 test ::= 		  <op>non-negative whole number \
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | <simple test>\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 simple test ::= 	  +\
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | *\
| non-negative whole number\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 op ::= 		  <\
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | > \
| ~\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 hide tag ::= 		  ?\
\pard\tqdec\tx624\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls11\ilvl1
\b\fs28 \cf0 3.3.	Syntax of \'96b, -B and \'96W child format strings\
\pard\pardeftab1304\ri-6\qj\partightenfactor0

\b0\fs20 \cf0 format ::= 		  <quote>< uncountable expression><quote>		\
quote ::= 		  \'94 
\i double quote (Windows)\

\i0  		  \'92 
\i single quote (Unix, Linux)
\i0 \
uncountable expression ::=   <uncountable expression element><expression>\
uncountable expression element ::= \
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0   <uncountable field spec> \
| literal expression\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 uncountable field spec ::= 	$ <uncountable field name>\
uncountable field name ::=	  f\
\pard\pardeftab1304\li1304\fi1304\ri-6\qj\partightenfactor0
\cf0 | t\
| w\
\pard\tqdec\tx624\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls12\ilvl1
\b\fs28 \cf0 3.4.	Examples of format strings\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 For example, if we want to output only those lemmas that are inflected in exactly five ways in the text, define the following \'96b (or \'96B) format:\
\pard\pardeftab1304\li1276\ri-6\sb240\qj\partightenfactor0
\cf0 -b \'92[$w [\{$W\}]5\\n]\'92\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 As we are using the $W field, we also need to specify the \'96W format:\
\pard\pardeftab1304\li1276\ri-6\sb240\qj\partightenfactor0
\cf0 -W \'92$w\'92\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 Explanation:\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 [\'85..]	We only want to generate output under certain conditions. These conditions are somewhere between the outer square brackets.\
[\'85.\\n]	If there is generated output, its final character must be a new line character. Thus, we are generating one line per output item.\
$w	A $w in a \'96b or \'96B format represents the lemma or lemma. Thus, the first thing on a line of output will be a lemma. In the \'96W format, $w stands for a full form of a word.\
$w [\'85	Between the \'92w\'92 and the opening square bracket is a blank. This blank is copied literally to the output.\
[\'85..]5	Here we have the expression that the outer square brackets can test. If there are exactly five occurrences of something between the inner square brackets, then this expression succeeds. Also, all five instances of the \'92something\'92 are copied to the output line.\
\{\'85\}	Like the blank that we saw before, the characters \{ and \} are copied to the output, but only if the condition that surrounds them is met. Also, only one \{ and one \} are copied, even though there is something that is output five times.\
$W	This is the \'92something\'92 that can occur a variable number of times. It is an item that tells that at this place something must be output, but it does not specify how. The \'92how\'92 is specified in another command line argument, the \'96W format. As seen above, the \'96W format specifies that just the full form is output. If there are more than one instances of $W, then the instances are separated by a vertical bar \'92|\'92. The separator can be re-specified with yet another command line argument, -s.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 Let us have a look at another format. We want output that, for each word in the text, shows exactly one lemma, followed by a blank. Although we are not going to have full forms in the output, what we want is still token-or type-oriented, as opposed to lemma oriented. So we use the \'96c format to have a token- or type- oriented handling and the \'96b and \'96B formats to have access to the lemma information of each token or type. The \'96c format will look as follows:\
\pard\pardeftab1304\li1276\ri-6\sb240\qj\partightenfactor0
\cf0 -c \'92 [$b0$B][$b1][[$b>1]?$B] \'92\
-b \'92$w\'92\
-B \'92$w\'92\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 Explanation:\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 \'92\'85] \'92	Between the closing bracket and the quote is a blank. Thus, each piece of output is concluded by a blank.\
[\'85][\'85][\'85]	There are three parts that, depending on the circumstances, can end up in the output. Of course, these parts correspond to the circumstance that we have no successful dictionary look-up, that we have an ambiguous dictionary look-up that cannot be remedied by disambiguation heuristics and that we have a dictionary look-up resulting in exactly one homograph. At face value, the three blocks could provide output independent of whether the other blocks do or not, but by looking at the conditions that are tested, we can conclude that one and only one block \'92fires\'92.\
 [$b0$B]	This block tells that the flex rule solution $B must be output if the dictionary look-up failed to return a homograph. The brackets surrounding $b0$B makes $B dependent on the success of $b0.\
$b1	This is a short-hand notation for [$b]1. It means that the field $b is copied to the output if there is exactly one instance of it. $b encapsulates the data that are obtained by dictionary look-up. Thus, if dictionary look-up gave exactly one homograph, then $b1 succeeds. The brackets surrounding $b1 can, in fact, be left out.\
 [[$b>1]?$B]	This block tells to use the flex rules\'92 solution instead of the homographs obtained from the dictionary. This is a last resort way to evade ambiguity.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 [\'85]?	This expression suppresses the output from the bracketed expression.\
The same result can be obtained using a slightly simpler \'96c format, testing the number of dictionary solutions two instead of three times:\
\pard\pardeftab1304\fi1276\ri-6\sb240\qj\partightenfactor0
\cf0 -c \'92$b1[[$b~1]?$B] \'92\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 Much more complex formats can be specified. For example, the following format creates output if a lemma is represented by three or four inflected forms:\
\pard\pardeftab1304\fi1304\ri-6\sb240\qj\partightenfactor0
\cf0 [$w [[\{$W\}]<5]>2\\n]\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 That is, the inner test [\{$W\}]<5 percolates the number of instances of $W to the surrounding brackets [\'85]>2. If the inner test succeeds, the outer test is applied. The outer test fails if the inner test fails or if there are two or less instances of $W. The same effect could be obtained by e.g.\
\pard\pardeftab1304\fi1304\ri-6\sb240\qj\partightenfactor0
\cf0 [$w \{$W\}[$W?]>2[$W?]<5\\n]\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 The last example shows that a [\'85] block only creates output if all conditions are met. We could use this to find all words that are lemmatised ambiguously by dictionary look-up as well as flex rule application (turn flex rule disambiguation off, -U-).\
\pard\pardeftab1304\fi1304\ri-6\sb240\qj\partightenfactor0
\cf0 -c \'92[$w dictionary( [$b]>1) flex rules([$B]>1)\\n]\'92\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 \
\pard\tqdec\tx510\pardeftab1304\li414\fi-414\ri-6\sb240\sa60\partightenfactor0
\ls13\ilvl1
\b\fs36 \cf0 4.	Command line options\
\pard\tqdec\tx624\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls14\ilvl1
\fs28 \cf0 4.1.	Introduction\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 The CST lemmatiser is, in fact, three programs in one. Besides its main purpose, lemmatising a text, it has two subordinate functions, namely the creation of resources that are used by the lemmatising process. The resources created by the program are\
\pard\tx360\pardeftab1304\li360\fi-360\ri-6\sb240\qj\partightenfactor0
\cf0 A machine-readable dictionary for quick look-up of words\
A set of flex rules for lemmatising words not found in the dictionary.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 In the paragraphs describing these functionalities, the following notation is used:\
-x	option letter x\
-x<arg>	option x requires an argument. The argument may be separated from the option letter by blanks.\
[opt]	\'93opt\'94 is an optional option (sic)\
<descr>	a variable, to be replaced by a value in a concrete command line.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\i \cf0 Important note:
\i0  Unix and Windows use different methods for keeping command line arguments together that contain blanks: In Windows, such arguments must be surrounded by double quotes. In Unix, arguments must be enclosed in single quotes. The examples below use single quotes (Unix format).\
\pard\tx1080\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls15\ilvl1
\b\fs28 \cf0 4.2.	Create binary dictionary\
\pard\tx1440\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls16\ilvl2
\fs24 \cf0 4.2.1.	Command line\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f2\b0\fs16 \cf0 cstlemma -D -c<format> [-N<frequency file> -n<format>] [-i<lemmafile>] [-o<binarydictionary>]\
\pard\pardeftab1304\li1320\ri-6\qj\partightenfactor0
\cf0 [-y[-]] [-k[-]]\
\pard\tx1440\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls17\ilvl2
\f0\b\fs24 \cf0 4.2.2.	Options\
\pard\pardeftab1304\li1320\fi-1320\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 -D	This option letter instructs the program to create a binary dictionary from a list of lemmas. Each line in the lemma file must contain a full form and a lemma.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -i<lemmafile>\
\pard\pardeftab1304\li1282\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 	Name of the dictionary (lemma) input file.\
\pard\pardeftab1304\li1265\fi-1265\ri-6\sb120\qj\partightenfactor0
\cf0 -c<format>	Column format of dictionary file (tab separated). You must use the letters \'91F\'92, \'91B\'92 and \'91T\'92 once. \'91F\'92 and \'91B\'92 indicate the columns of full forms and lemmas respectively. \'91T\'92 indicates the column containing the word class of the full form.\
\pard\pardeftab1304\ri-6\sb120\qj\partightenfactor0
\cf0 Example:\
\pard\pardeftab1304\li1304\fi1304\ri-6\sb120\qj\partightenfactor0
\cf0 -cFBT\
\pard\pardeftab1304\li1304\ri-6\sb120\qj\partightenfactor0
\cf0 which means: 1st column = full form, 2nd column = lemma, 3rd column = type\
\pard\pardeftab1304\li2564\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 klon	klon	N	\
\pard\pardeftab1304\li2564\fi-1282\ri-6\qj\partightenfactor0
\cf0 klon	klone	V_IMP	\
klone	klone	V_INF	\
klonede	klone	V_PARTC_PAST	\
klonede	klone	V_PAST	\
klonedes	klone	V_PAST	\
klonen	klon	N	\
klonen	klone	V_GERUND	\
klonende	klone	V_PARTC_PRES	\
klonens	klon	N_GEN	\
kloner	klon	N	\
kloner	klone	V_PRES	\
klonerne	klon	N	\
klonernes	klon	N_GEN	\
kloners	klon	N_GEN	\
klones	klone	V_INF	\
klones	klone	V_PRES	\
klonet	klone	V_PARTC_PAST	\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -N<frequency file>\
\pard\pardeftab1304\li1282\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 	The name of a file that contains frequency information of full forms, as extracted from a corpus. This file may also contain lemma frequencies. You can specify one or more frequency files. For each frequency file you must specify a column format with a \'96n option specification. The first \'96N specification is paired with the first \'96n specification, the second with the second, etc.\
\pard\pardeftab1304\li1265\fi-1265\ri-6\sb240\qj\partightenfactor0
\cf0 -n<format>	Column format of frequency file (tab separated). The column indicated by \'91N\'92 contains a full form\'92s frequency. The column indicated by \'91F\'92 indicates the full form. The column indicated by \'91T\'92 contains the word class of the full form. Optionally, you can indicate a column containing lemmas with the letter \'91B\'92. You can use \'91?\'92 to cancel out columns containing irrelevant data. You can have both frequency files containing lemma-information and frequency files not containing this information If no lemma-information is present, all lemmas compatible with a given full form are incremented with the frequency data.\
\pard\pardeftab1304\ri-6\sb120\qj\partightenfactor0
\cf0 Example:\
\pard\pardeftab1304\li1304\fi1304\ri-6\sb120\qj\partightenfactor0
\cf0 -nN?FT\
\pard\pardeftab1304\li1304\ri-6\sb120\qj\partightenfactor0
\cf0 which means: 1st column N(frequency), 2nd column irrelevant, 3rd column F(ull form), 4th column T(ype).\
\pard\pardeftab1304\li2564\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 1533	4.790625	reception	N\
\pard\pardeftab1304\li2564\fi-1282\ri-6\qj\partightenfactor0
\cf0 1532	4.7875	oprindelige	ADJ\
1531	4.784375	tanker	N\
1531	4.784375	tabt	V_PARTC_PAST\
1531	4.784375	l\'e6ngst	ADV\
1531	4.784375	etniske	ADJ\
1529	4.778125	serberne	N\
1526	4.76875	voldsomt	ADJ\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -o<binarydictionary>\
\pard\pardeftab1304\li1282\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 	Name of the output file. Notice that the output file is a binary file. It is, in general, not portable between operating systems and hardware platforms.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -y	test output\
\pard\pardeftab1304\li1282\fi-1282\ri-6\qj\partightenfactor0
\cf0 -y-	production output (default)\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -k	collapse homographs (remove ",n" endings)(default)\
\pard\pardeftab1304\li1282\fi-1282\ri-6\qj\partightenfactor0
\cf0 -k-	do not collapse homographs (keep ",n" endings)\
\pard\tx1080\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls18\ilvl1
\b\fs28 \cf0 4.3.	Create or add flex patterns\
\pard\tx1440\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls19\ilvl2
\fs24 \cf0 4.3.1.	Command line\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f2\b0\fs16 \cf0 cstlemma -F -c<format> [-y[-]] [-i<lemmafile>] [-f<old flexpatterns>] [-o<new flexpatterns>]\
\pard\tx1440\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls20\ilvl2
\f0\b\fs24 \cf0 4.3.2.	Options\
\pard\pardeftab1304\li1320\fi-1320\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 -F	This option letter instructs the program to build a list of flex rules from a list of lemmas. As minimum, each line in the lemma file must contain a full form and a lemma. If the word class of the full form is provided, then a better list of flex rules can be made, but it can only be applied to POS-tagged texts, preferably using the same tag set as the lemma list. \
-c<format>	column format, e.g. -cBFT, which means: 1st column B(aseform), 2nd column F(ullform), 3rd column T(ype)\
\pard\pardeftab1304\li1282\ri-6\sb120\qj\partightenfactor0
\cf0 For lemmatising untagged text, suppress word class information by specifying '?' in place of 'T'\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -i<lemmafile>\
\pard\pardeftab1304\li1282\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 	Name of the input dictionary (lemma) file. This can be the same file as used for the creation of the binary dictionary.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -f<old flexpatterns>\
\pard\pardeftab1304\li1282\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 	By specifying this option you can refine an existing flex rule file (the argument of the \'96f option).\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -o<new flexpatterns>\
\pard\pardeftab1304\li1282\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 	Name of the output file. The flex rule file is a text file and can be post-edited manually, for example for removing an unwanted group of rules. The flex rule file can safely be ported between operating systems and hardware platforms, which is nice, because generating the flex rules is a time consuming process.\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -y	test output\
\pard\pardeftab1304\li1282\fi-1282\ri-6\qj\partightenfactor0
\cf0 -y-	release output (default)\
\pard\tx1080\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls21\ilvl1
\b\fs28 \cf0 4.4.	Lemmatise\
\pard\tx1440\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls22\ilvl2
\fs24 \cf0 4.4.1.	Command line\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f2\b0\fs16 \cf0 cstlemma [-L] -c<format> [-d<binarydictionary>] -f<flexpatterns> [-b<format>] [-B<format>]\
\pard\pardeftab1304\fi880\ri-6\qj\partightenfactor0
\cf0 [-W<format>] [-s[<sep>]] [-u[-]] [-U[-]] [-v[-]] [-x<Word class translation table>]\
[-v<tag friends file>] [-z<type conversion table>] [-i<input>] [-o<output>] [-m<number>]\
\pard\tx1440\pardeftab1304\li505\fi-505\ri-6\sb240\qj\partightenfactor0
\ls23\ilvl2
\f0\b\fs24 \cf0 4.4.2.	Options\
\pard\pardeftab1304\li1265\fi-1265\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 -L	This option instructs the program to lemmatise (as opposed to creating a machine-readable dictionary or a set of flex rules). Optional (Lemmatising is the default behaviour of the program).\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -i<input>	Specification of input text. Only needed if input isn\'92t standard input. The CST lemmatiser can handle tagged as well as untagged text, depending on the setting of the \'96t option\
-I<format>	Specification of deviating input format. Without this option, the CST lemmatiser assumes, depending on the setting of the \'96t option, that the input is a flat text or a text consisting of word-tag pairs where the word is followed by its tag, separated by a slash. With this option, more complex input text can be read. For example, -I\'92$d\\t$w\\t$t\\n\'92 reads a text that represents one word per line, a line containing the word\'92s lemma, its full form and its tag, in this order and each element separated from its neighbours by a tab. The meaning of the format string is as follows:\
\pard\pardeftab1304\li2564\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 $w	captures the full form of the word, i.e. the element to be lemmatised\
$t	captures the POS-tag (the word class as assigned during a previous process, eg. a tagger) of the word \
$d	captures en element that we don\'92t use (dummy); in the example above this is the lemma as provided in the input.\
\\t	matches a tab\
\\n	matches a new line character\
Other elements that can occur are\
a literal	matches a string of one or more characters. All characters in the literal expression must occur in the input in the same order and with the same case, otherwise the match fails. If there are more than one occurrences of the literal in the input, then only the first occurrence is matched.\
\\s	matches any number of white space characters (including new lines and tabs)\
\\S 	matches any number of non-white space characters\
\pard\pardeftab1304\li1265\fi-1265\ri-6\sb240\qj\partightenfactor0
\cf0 -o<output>	Specification of the output file. If the input is standard input then the default output is standard output. Otherwise the default output is a file with a name that is constructed from the input file\'92s name by merely appending an extension \'91.lemma\'92. The output file\'92s format can be defined with the -b, -B, -c and -W options.\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -d<binarydictionary>\
\pard\pardeftab1304\li1282\ri-6\sb120\qj\partightenfactor0
\cf0 The name of the machine-readable dictionary as produced with the -D option set. If no dictionary is specified, then only the flex patterns are used. Without dictionary, wrong tags in the input cannot be corrected.  Note that the dictionary is in a format that, in general, is not portable between different operating systems and hardware platforms. \
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -f<flexpatterns>	\
\pard\pardeftab1304\li1282\ri-6\sb120\qj\partightenfactor0
\cf0 Specification of the file containing flex patterns. (see \'96F option). It is advisable to use different files for tagged and untagged text. Best results for untagged input are obtained if the rules are made without word class information.\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -b<format string>\
\pard\pardeftab1304\li1276\ri-6\sb120\qj\partightenfactor0
\cf0 Default:"$w" Output format for data pertaining to the lemma, according to the 
\i dictionary
\i0 :\
\pard\pardeftab1304\li2552\fi-1276\ri-6\sb120\qj\partightenfactor0
\cf0 $f	Lemma token frequency in the input text.\
$t	word class\
$w	lemma\
\\$	dollar character\
\\[	Opening square bracket [\
\\]	Closing square bracket ]\
\\t	tab\
\\n	newline (especially useful in combination with the \'96W option.\
$W	(List of) full form(s) in the text belonging to this lemma. A lemma can have any number of full forms. This number can be tested in conditions. The $W field can only be used if the \'96W option is specified, which is incompatible with the \'96c option. For a fuller description of how to program the output, see chapter 3. \
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -B<format string>\
\pard\pardeftab1304\li2564\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 Default:"$w". Output format for data pertaining to the lemma, as predicted by 
\i flex pattern rules
\i0 . See -b\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -W<format string>\
\pard\pardeftab1304\li1276\ri-6\sb120\qj\partightenfactor0
\cf0 Default: not present. Use the \'96W option if you want to have an overview over which lemmas occur in the text and in which appearances. The \'96W format decides how, for each lemma, the full forms belonging to this lemma should be written. You must use this option in combination with \'96b, -B or both. If both \'96b and \'96B are specified, the two lists are simply concatenated in the output, the list of lemmas according to the dictionary (-b) first. The \'96b or \'96B format must contain a field $W for the \'96W option to take effect. The \'96W option is similar to the \'96c option, but $b and $B are not allowed in \'96W format strings.\
$w	a full form of the lemma, as occurring in the input text.\
$t	word class(s) according to dictionary\
$f	full form type frequency\
$i	info:\
\pard\pardeftab1304\li2552\fi29\ri-6\qj\partightenfactor0
\cf0 -	full form is not in the dictionary\
\pard\pardeftab1304\li2580\fi29\ri-6\qj\partightenfactor0
\cf0 +	full form is in the dictionary, but having another type\
\pard\pardeftab1304\li2552\fi29\ri-6\qj\partightenfactor0
\cf0 (blank) 	full form is in the dictionary\
\pard\pardeftab1304\li1276\ri-6\sb120\qj\partightenfactor0
\cf0 \\t	tab\
Example: -W"$w/$t"\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -c<format string>\
\pard\pardeftab1304\fi1276\ri-6\sb120\qj\partightenfactor0
\cf0 default: \'91$w\\t$b1[[$b?]~1$B]\\t$t\\n\'92 Output format\
\pard\pardeftab1304\li2585\fi-1309\ri-6\sb120\qj\partightenfactor0
\cf0 $w 	full form\
\pard\pardeftab1304\li2552\fi-1276\ri-6\sb120\qj\partightenfactor0
\cf0 $b 	lemma(s) according to dictionary. (You also need to specify -b<format>) (If the full form is found in the dictionary and tag=word class, then only one lemma is output. Otherwise all lemmas may output, but see also the \'96U option)\
$B 	lemma(s) according to flex pattern rule. You also need to specify\
\pard\pardeftab1304\li2552\fi-23\ri-6\qj\partightenfactor0
\cf0  -B<format>. \
\
\pard\pardeftab1304\li2552\fi-1276\ri-6\qj\partightenfactor0
\cf0 $s	word separator: new line character when the current word is the last\
\pard\pardeftab1304\li2552\fi-23\ri-6\qj\partightenfactor0
\cf0 word before a line break, blank otherwise\
\pard\pardeftab1304\li2530\fi-1254\ri-6\sb120\qj\partightenfactor0
\cf0 $t	word class(s) according to dictionary\
$f	full form type frequency\
$i	info:\
\pard\pardeftab1304\li2580\fi29\ri-6\qj\partightenfactor0
\cf0 -	full form not in dictionary\
\pard\pardeftab1304\li2552\fi29\ri-6\qj\partightenfactor0
\cf0 +	full form in dictionary, but other word class\
\pard\pardeftab1304\li2524\fi29\ri-6\qj\partightenfactor0
\cf0 (blank)	full form in dictionary\
\pard\pardeftab1304\li2530\fi-1254\ri-6\sb120\qj\partightenfactor0
\cf0 \\t	tab\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -q	Sort output.\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 -q-	Do not sort output (default).\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -s<sep>	Multiple lemmas (-b -B) are <sep>-separated. Example: -s" | ".\
\pard\pardeftab1304\ri-6\qj\partightenfactor0
\cf0 -s	Multiple lemmas (-b -B) are "|"-separated (default).\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -t	Input text is tagged (default).\
\pard\pardeftab1304\li1276\fi-1276\ri-6\qj\partightenfactor0
\cf0 -t-	Input text is not tagged.\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -U	Enforce unique flex rules (default).\
\pard\pardeftab1304\li1276\fi-1276\ri-6\qj\partightenfactor0
\cf0 -U-	Allow ambiguous flex rules.\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -u	Disambiguate dictionary look-up (default). By using this option, the program is instructed to use corpus based frequencies to disambiguate between two otherwise acceptable lemmas. The corpus based frequencies are stored in the dictionary. Also, if dictionary lookup results in more than one homographs that only differ in a sequence number appended to the lemma, then the program is instructed to merge all homographs into one by dropping the sequence number.\
\pard\pardeftab1304\li1276\fi-1276\ri-6\qj\partightenfactor0
\cf0 -u-	Allow ambiguous dictionary look-up\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0
\cf0 -Hn	Disambiguation based on lemma frequencies in the input text:\
\pard\pardeftab1304\li2564\fi-1282\ri-6\sb120\qj\partightenfactor0
\cf0 n = 0:	use lemma frequencies in the input text for disambiguation (default)\
n = 1:	use lemma frequencies in the input text for disambiguation, show candidates for pruning between << and >>\
n = 2:	do not use lemma frequencies for disambiguation.\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -v<tag friends file>:\
\pard\pardeftab1304\li1276\ri-6\sb120\qj\partightenfactor0
\cf0 Use this option to coerce the nearest fit between input tag and the dictionary's word classs if the dictionary has more than one homographs of the input word and none of these has a word class that exactly agrees with the input tag. Format:\
\pard\pardeftab1304\li2580\fi28\ri-6\sb120\qj\partightenfactor0
\cf0 \{<dict type> \{<space> <tag>\}* <newline>\}*\
\pard\pardeftab1304\li1276\ri-6\sb120\qj\partightenfactor0
\cf0 The more to the left the tag is, the better the agreement with the dictionary's word class.\
Example:\
\pard\pardeftab1304\li1282\ri-6\qj\partightenfactor0
\cf0 ADJ	V_PARTC_PAST ADV V_PAST V_INF\
ADJ_GEN	N_GEN V_PRES V_INF\
ADV	PR\'c6P UKONJ\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -x<Word class translation table>: \
\pard\pardeftab1304\li1276\ri-6\sb120\qj\partightenfactor0
\cf0 Use this option to handle tagged texts with tags that do not occur in the dictionary. Format:\
\pard\pardeftab1304\li2580\fi28\ri-6\sb120\qj\partightenfactor0
\cf0 \{<dict word class> \{<space> <tag>\}* <newline>\}*\
\pard\pardeftab1304\li1276\fi-1276\ri-6\sb240\qj\partightenfactor0
\cf0 -z<type conversion table>:\
\pard\pardeftab1304\li1276\ri-6\sb120\qj\partightenfactor0
\cf0 Use this option to change the meaning of $t in -b and -B formats. Without conversion table, $t is the word class of the full form. With conversion table, $t is the word class of the lemma, as defined by the table. Format:\
\pard\pardeftab1304\li2580\fi28\ri-6\sb120\qj\partightenfactor0
\cf0 \{<lemma type> <space> <full form word class> <newline>\}*\
\pard\pardeftab1304\ri-6\sb120\qj\partightenfactor0
\cf0 	Example:\
\pard\pardeftab1304\li2564\fi-1282\ri-6\qj\partightenfactor0
\cf0 V_GERUND	V\
V_IMP	V\
V_INF	V\
V_MED_INF	V_MED\
V_MED_PARTC_PAST	V_MED\
V_MED_PAST	V_MED\
V_MED_PRES	V_MED\
V_PARTC_PAST	V\
V_PARTC_PRES	V\
V_PAST	V\
V_PRES	V\
\pard\pardeftab1304\li1265\fi-1265\ri-6\sb240\qj\partightenfactor0
\cf0 -m<number>	Limit the number of words to lemmatise to <number>. If the input contains more than <number> words, then only the first <number> words are lemmatised. If <number> is 0 (zero), then the lemmatiser does not limit the number of words (default).\
\pard\pardeftab1304\li2552\fi-1276\ri-6\qj\partightenfactor0
\cf0 \
\pard\tx1080\pardeftab1304\li431\fi-431\ri-6\sb240\qj\partightenfactor0
\ls24\ilvl1
\b\fs28 \cf0 4.5.	Option files\
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\b0\fs20 \cf0 Often-used combinations of option settings can be stored in option files. Instead of writing the options on the command file, you instruct the program to read the option file. The syntax for option file inclusion is\
\pard\pardeftab1304\ri-6\sb120\qj\partightenfactor0

\f2\fs16 \cf0 cstlemma -@ 
\f4\i option file name
\f2\i0 \
\pard\pardeftab1304\ri-6\sb240\qj\partightenfactor0

\f0\fs20 \cf0 You can include more than one option files on the same command line. You can have both \'91normal\'92 options and option file inclusions on the same command line. You can overrule option settings by specifying them more than once: only the last setting takes effect. You can include option files inside other option files.\
In an option file each option occupies one line, but lines can also be empty or contain comments. Comments are introduced by a semicolon and can also follow after an option setting on the same line.\
}